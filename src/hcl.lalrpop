use std::str::FromStr;
use crate::ast;

grammar;

pub Hcl: ast::Hcl = {
    <b:Body*> => {
        ast::Hcl {
            statements: b
        }
    }
};

Body: ast::Statement = {
    <b:Block> => b,
    <a:Attribute> => a,
};

Attribute: ast::Statement = {
    <i:Identifier> "=" <e:Expression> => {
        ast::Statement {
            node: ast::StatementType::Attribute {
                identifier: i,
                expression: e
            }
        }
    }
};

Block: ast::Statement = {
    <i:Identifiers+> "{" <body:Body+> "}" => {
        let mut blocks = vec![];
        let mut attrs = vec![];

        for stmt in body {
            match stmt.node {
                ast::StatementType::Block { .. } => blocks.push(stmt),
                ast::StatementType::Attribute { .. } => attrs.push(stmt),
            }
        }

        ast::Statement {
            node: ast::StatementType::Block {
                block_identifiers: i,
                attributes: attrs,
                child_blocks: blocks,
            }
        }
    },
};

Identifiers: String = {
    Identifier,
    QuotedIdentifier,
};

Expression: ast::Expression = {
    Operation => {
        ast::Expression {
            node: ast::ExpressionType::Null
        }
    },
    Conditional => {
        ast::Expression {
            node: ast::ExpressionType::Null
        }
    },
    TemplateInterpolation => {
        ast::Expression {
            node: ast::ExpressionType::TemplateInterpolation { text: "temp".to_string() },
        }
    }
};

TemplateInterpolation: () = {
    "${" Term "}",
    "${" "~" Term "~" "}",
};

Conditional: () = {
    Term "?" Term ":" Term,
};

// Precedence: highest to lowest.
// Level    Operators
//   6      * / %
//   5      + -
//   4      > >= < <=
//   3      == !=
//   2      &&
//   1      ||
Operation: () = {
    OperationUnary,
    OperationBinary,
};

OperationUnary: () = {
    "-" Term,
    "!" Term,
};

OperationBinary: () = {
    OperationOr,
};

// Precedence is created by adding nonterminals with higher precedence to the production rules.
// "Itself plus its child"
// '||' has the lowest precedence.
OperationOr: () = {
    OperationOr "||" OperationAnd,
    OperationAnd,
};

OperationAnd: () = {
    OperationAnd "&&" OperationEq,
    OperationEq,
};

OperationEq: () = {
    OperationEq "==" OperationComp,
    OperationEq "!=" OperationComp,
    OperationComp,
};

OperationComp: () = {
    OperationComp ">" OperationAddSub,
    OperationComp "<" OperationAddSub,
    OperationComp ">=" OperationAddSub,
    OperationComp "<=" OperationAddSub,
    OperationAddSub,
};

OperationAddSub:() = {
    OperationAddSub "+" OperationMulDiv,
    OperationAddSub "-" OperationMulDiv,
    OperationMulDiv,
};

OperationMulDiv: () = {
    OperationMulDiv "*" Term,
    OperationMulDiv "/" Term,
    OperationMulDiv "%" Term,
    Term,
};

Term: () = {
    NumberValue,
    NullValue,
    BooleanValue,
    CollectionValue,
    // TemplateExpr,  // TODO: it can't parse newlines for some reason
    Identifiers,
    FunctionCall,
    ForExpr,
    Term Splat,
    "(" Expression ")",
};

NumberValue: ast::Term = {
    <n:Number> => {
        ast::Term {
            node: ast::TermType::Number {
                value: n
            }
        }
    }
};

NullValue: ast::Term = {
    "null" => {
        ast::Term {
            node: ast::TermType::Null
        }
    },
};

BooleanValue: ast::Term = {
    "true" => {
        ast::Term {
            node: ast::TermType::Boolean {
                value: true
            }
        }
    },
    "false" => {
        ast::Term {
            node: ast::TermType::Boolean {
                value: false
            }
        }
    }
};

CollectionValue: ast::Term = {
    Tuple,
    Object,
};

Tuple: ast::Term = {
    "[" <e1:Expression?> <e2:("," Expression)*> "]" => {
        let mut exprs = Vec::new();

        if e1.is_some() {
            exprs.push(e1.unwrap());
        }

        for expr in e2 {
            exprs.push(expr.1);
        }

        ast::Term {
            node: ast::TermType::Tuple {
                expressions: exprs,
            }
        }
    }
};

Object: ast::Term = {
    "{" ObjectCommaList? "}" => {
        ast::Term {
            node: ast::TermType::Null
        }
    }
};

ObjectCommaList: () = {
    Expression "=" Expression,
    Expression "=" Expression "," ObjectCommaList
};


Splat: () = {
    "." "*",
    "." Identifier,     // GetAttr
    "[" "*" "]",
    "[" Expression "]", // Index
};

FunctionCall: ast::Term = {
    <i:Identifier> "(" <e1:Expression?> <e2:("," Expression)*> ")" => {
        let mut exprs = Vec::new();

        if e1.is_some() {
            exprs.push(e1.unwrap());
        }
        for expr in e2 {
            exprs.push(expr.1);
        }

        ast::Term {
            node: ast::TermType::FunctionCall {
                name: i,
                expressions: exprs,
            }
        }
    }
};

ForExpr: ast::Term = {
    ForTupleExpr,
    ForObjectExpr,
};

ForTupleExpr: ast::Term = {
    "[" <f:ForIntro> <e:Expression> <i:("if" Expression)?> "]" => {
        let mut expr = None;

        if i.is_some() {
            expr = Some(i.unwrap().1)
        }

        ast::Term {
            node: ast::TermType::ForTuple {
                intro: f,
                expression: e,
                if_expression: expr,
            }
        }
    }
};

ForObjectExpr: ast::Term = {
    "{" <f:ForIntro> <e1:Expression> "=>" <e2:Expression> "..."? <i:("if" Expression)?> "}" => {
        let mut expr = None;

        if i.is_some() {
            expr = Some(i.unwrap().1)
        }

        ast::Term {
            node: ast::TermType::ForObject {
                intro: f,
                key_expression: e1,
                value_expression: e2,
                if_expression: expr,
            }
        }
    }
};

ForIntro: ast::For = {
    // for key, val in items():
    "for" <i:Identifier> <i2:("," Identifier)*> "in" <e:Expression> ":" => {
        let mut ids: Vec<String> = vec![i];

        ids.extend(i2.into_iter().map(|e| e.1).collect::<Vec<String>>());

        ast::For {
            node: ast::ForType::Intro {
                identifiers: ids,
                expression: e,
            }
        }
    }
};

TemplateExpr: () = {
    // TODO: quotedTemplate (a double-quoted string with escaped quotes)
    Heredoc Identifier "\n" Identifiers* "\n"
};

QuotedIdentifier: String = r#""[a-zA-Z_][a-zA-Z_0-9]*""# => <>.to_string();
Identifier: String = r#"[a-zA-Z_][a-zA-Z_0-9]*"# => <>.to_string();
Number: u32 = r"[0-9]+" => u32::from_str(<>).unwrap();
Heredoc: String = r"<<-?" => <>.to_string();
